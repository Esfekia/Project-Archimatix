using System.Collections;
using System.Collections.Generic;
using UnityEngine;


using AX;


public class CubeRuntimeController : AXRuntimeControllerBase {



	// Interface between AXParameters and dynamic variables visible 
	// to runtime systems such as Unities UI and PlayMaker, etc.

	// This code features a section that is automatically generated byt a button in the Inspector for an AXModel.
	// The code will:
	//     1. Define AXParameter references
	//     2. Define Dynamic Variables.
	//     3. Create an initialization function to set references to the AXParameters, 
	//        which are used by the Dynamic variables. 




	// Do not edit the code in the following region by hand. 

	#region AUTO_GENERATED AX BINDINGS

	// *** PARAMETER_REFERENCES_DEFINITION *** //

	private AXParameter P_Box_Height;
	private AXParameter P_Box_Bevel_Segs;
	private AXParameter P_Box_Bevel_Top;
	private AXParameter P_Box_Sides;

	// *** PARAMETER_REFERENCES_DEFINITION *** //



	// *** DYNAMIC_VARIABLES *** //

	public float Box_Height {
		get {
			if (model != null)
				return P_Box_Height.FloatVal;
			return 0;
		}
		set {
			if (P_Box_Height != null)
				P_Box_Height.setValue(value);
		}
	}
	public int Box_Bevel_Segs {
		get {
			if (model != null)
				return P_Box_Bevel_Segs.IntVal;
			return 0;
		}
		set {
			if (P_Box_Bevel_Segs != null)
				P_Box_Bevel_Segs.setValue(value);
		}
	}
	public float Box_Bevel_Top {
		get {
			if (model != null)
				return P_Box_Bevel_Top.FloatVal;
			return 0;
		}
		set {
			if (P_Box_Bevel_Top != null)
				P_Box_Bevel_Top.setValue(value);
		}
	}
	public bool Box_Sides {
		get {
			if (model != null)
				return P_Box_Sides.boolval;
			return true;
		}
		set {
			if (P_Box_Sides != null)
				P_Box_Sides.setValue(value);
		}
	}

	// *** DYNAMIC_VARIABLES *** //



	// *** PARAMETER_REFERENCE_INIT *** //

	protected override void InitializeParameterReferences()
	{
		P_Box_Height	= model.getParameter ("Box_Height");
		P_Box_Bevel_Segs	= model.getParameter ("Box_Bevel Segs");
		P_Box_Bevel_Top	= model.getParameter ("Box_Bevel Top");
		P_Box_Sides	= model.getParameter ("Box_Sides");
	}

	// *** PARAMETER_REFERENCE_INIT *** //

	 
	#endregion


	// This InitializeController function must call the base Start dor 
	// this controller to work properly.
	void Start()
	{
		InitializeController();

		// Other optional initializatin code here...

	}

	// Update is called once per frame
	void Update () {

		// Any game specific code that sets or gets the width in the course of player events.

		Box_Height 		= 1.5f + Mathf.Sin(Time.time)+ Mathf.Cos(2*Time.time)/2;

	}


}
